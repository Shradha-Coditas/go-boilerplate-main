// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/album": {
            "get": {
                "description": "Get all Album list with pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Albums"
                ],
                "summary": "To fetch Album list with pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "limit records for pagination Max 20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "Skip records for pagination start from 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.AlbumGetResponse"
                        }
                    },
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid Request.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Albums Not Found.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Api for insert album data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Albums"
                ],
                "summary": "store data of album request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Payload for Album",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/albums.AlbumRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/albums.AlbumResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Payload.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "406": {
                        "description": "Token Expired.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "503": {
                        "description": "service Unavailable.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a album by particular Id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Albums"
                ],
                "summary": "Delete a album details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Params for delete Album by id.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delete.AlbumDeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/albums.AlbumResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Payload.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Album Not Found.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Api for update album data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Albums"
                ],
                "summary": "Update data of album request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Payload for Album",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/albums.AlbumUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/albums.AlbumResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Payload.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "406": {
                        "description": "Token Expired.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "503": {
                        "description": "service Unavailable.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    }
                }
            }
        },
        "/tags": {
            "post": {
                "description": "Api for Last Ticker data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "store data of Last Ticker request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Payload for Album",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tags.LastTick"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/tags.LastTickResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Payload.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "406": {
                        "description": "Token Expired.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    },
                    "503": {
                        "description": "service Unavailable.",
                        "schema": {
                            "$ref": "#/definitions/genericmodel.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "albums.AlbumRequest": {
            "type": "object",
            "required": [
                "artist",
                "price",
                "title"
            ],
            "properties": {
                "artist": {
                    "description": "Artist name of Album",
                    "type": "string"
                },
                "price": {
                    "description": "Price of Album",
                    "type": "number"
                },
                "title": {
                    "description": "title of Album",
                    "type": "string"
                }
            }
        },
        "albums.AlbumResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "albums.AlbumUpdateRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "artist": {
                    "description": "Artist name of Album",
                    "type": "string"
                },
                "id": {
                    "description": "Id of Album",
                    "type": "integer"
                },
                "price": {
                    "description": "Price of Album",
                    "type": "number"
                },
                "title": {
                    "description": "title of Album",
                    "type": "string"
                }
            }
        },
        "albums.AlbumsResponseData": {
            "type": "object",
            "properties": {
                "artist": {
                    "description": "Artist name of Album",
                    "type": "string"
                },
                "createdAt": {
                    "description": "time at row created",
                    "type": "string"
                },
                "id": {
                    "description": "Id of Album",
                    "type": "integer"
                },
                "price": {
                    "description": "Price of Album",
                    "type": "number"
                },
                "title": {
                    "description": "title of Album",
                    "type": "string"
                }
            }
        },
        "delete.AlbumDeleteRequest": {
            "type": "object",
            "required": [
                "albumid"
            ],
            "properties": {
                "albumid": {
                    "description": "Id for album request to delete",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "genericmodel.ErrResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "get.AlbumGetResponse": {
            "type": "object",
            "properties": {
                "Albums": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/albums.AlbumsResponseData"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Albums data found successFully"
                },
                "totalAlbums": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "tags.LastTick": {
            "type": "object",
            "properties": {
                "close": {
                    "description": "Low Price of LastTick",
                    "type": "number"
                },
                "high": {
                    "description": "High Price of LastTick",
                    "type": "number"
                },
                "id": {
                    "description": "id of LastTick",
                    "type": "string"
                },
                "low": {
                    "description": "Low Price of LastTick",
                    "type": "number"
                },
                "open": {
                    "description": "Open Price of LastTick",
                    "type": "number"
                },
                "price": {
                    "description": "Price of LastTick",
                    "type": "integer"
                },
                "tickDate": {
                    "description": "Total Volume of LasTick",
                    "type": "integer"
                },
                "totalVolume": {
                    "description": "Total Volume of LasTick",
                    "type": "number"
                }
            }
        },
        "tags.LastTickResponse": {
            "type": "object",
            "properties": {
                "string": {
                    "description": "Total Volume of LasTick",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/v1",
	Schemes:     []string{},
	Title:       "Boiler Plate",
	Description: "Golang BoilerPlate Api.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
